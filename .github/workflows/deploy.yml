name: CI/CD Pipeline with Database Migration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Build job
  build:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type check
      run: npm run typecheck
      
    - name: Run linting
      run: npm run lint
      
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: Run Supabase Migration
      run: |
        # Run migration using Node.js script (no Supabase CLI needed)
        node scripts/migrate.js
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        
    - name: Verify Migration Success
      run: |
        echo "✅ Database migration completed successfully"

  # Deploy job - waits for build to complete
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build  # Wait for build job to complete successfully
    
    steps:
    - name: Install Vercel CLI
      run: |
        echo "📦 Installing Vercel CLI..."
        npm install -g vercel@latest
        
    - name: Deploy to Vercel
      id: deploy
      run: |
        echo "🚀 Deploying to Vercel via CLI..."
        
        # Set Vercel token
        export VERCEL_TOKEN="${{ secrets.VERCEL_TOKEN }}"
        
        # Deploy to Vercel
        echo "📡 Creating deployment..."
        deployment_output=$(vercel --prod --yes --token="${{ secrets.VERCEL_TOKEN }}" 2>&1)
        echo "📄 Deployment output: $deployment_output"
        
        # Extract deployment URL from output
        deployment_url=$(echo "$deployment_output" | grep -o 'https://[^[:space:]]*\.vercel\.app' | head -1)
        if [ -z "$deployment_url" ]; then
          echo "❌ Failed to extract deployment URL"
          echo "📄 Full output: $deployment_output"
          exit 1
        fi
        
        echo "✅ Deployment created successfully!"
        echo "🌐 Deployment URL: $deployment_url"
        echo "deployment_url=$deployment_url" >> $GITHUB_OUTPUT
        
    - name: Wait for Vercel Build
      run: |
        deployment_url="${{ steps.deploy.outputs.deployment_url }}"
        echo "⏳ Waiting for Vercel build to complete..."
        echo "🌐 Deployment URL: $deployment_url"
        
        # Wait a moment for deployment to be ready
        echo "⏳ Waiting 30 seconds for initial deployment..."
        sleep 30
        
        # Test the deployment URL
        echo "🧪 Testing deployment URL..."
        response=$(curl -s -o /dev/null -w "%{http_code}" "$deployment_url" || echo "000")
        echo "📡 HTTP Status: $response"
        
        if [ "$response" = "200" ]; then
          echo "✅ Deployment is live and working!"
          echo "🎉 Your application is now available at: $deployment_url"
        else
          echo "⚠️  Deployment might still be building..."
          echo "🔍 Check your Vercel dashboard for the latest deployment"
          echo "🌐 URL: $deployment_url"
        fi
