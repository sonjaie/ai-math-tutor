name: CI/CD Pipeline with Database Migration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Build job
  build:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type check
      run: npm run typecheck
      
    - name: Run linting
      run: npm run lint
      
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: Run Supabase Migration
      run: |
        # Run migration using Node.js script (no Supabase CLI needed)
        node scripts/migrate.js
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        
    - name: Verify Migration Success
      run: |
        echo "✅ Database migration completed successfully"

  # Deploy job - waits for build to complete
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: build  # Wait for build job to complete successfully
    
    steps:
    - name: Trigger Vercel Deploy Hook
      id: deploy
      run: |
        echo "🚀 Triggering Vercel deployment..."
        echo "🔍 Deploy Hook URL: ${{ secrets.VERCEL_DEPLOY_HOOK_URL }}"
        
        # Test the deploy hook URL first
        if [ -z "${{ secrets.VERCEL_DEPLOY_HOOK_URL }}" ]; then
          echo "❌ VERCEL_DEPLOY_HOOK_URL is not set!"
          exit 1
        fi
        
        # Trigger deployment
        response=$(curl -X POST "${{ secrets.VERCEL_DEPLOY_HOOK_URL }}" -s -w "\nHTTP_CODE:%{http_code}")
        http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d: -f2)
        json_response=$(echo "$response" | sed '/HTTP_CODE:/d')
        
        echo "📡 HTTP Status: $http_code"
        echo "📄 Response: $json_response"
        
        if [ "$http_code" != "200" ] && [ "$http_code" != "201" ]; then
          echo "❌ Deploy hook failed with HTTP $http_code"
          echo "🔍 Check your Vercel deploy hook URL in GitHub secrets"
          exit 1
        fi
        
        # Extract deployment ID from response
        deployment_id=$(echo "$json_response" | jq -r '.job.id // empty')
        if [ -z "$deployment_id" ]; then
          echo "❌ Failed to get deployment ID from Vercel response"
          echo "📄 Full response: $json_response"
          exit 1
        fi
        
        echo "✅ Deployment triggered successfully!"
        echo "📊 Deployment ID: $deployment_id"
        echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT
        
    - name: Wait for Vercel Deployment
      run: |
        deployment_id="${{ steps.deploy.outputs.deployment_id }}"
        echo "⏳ Waiting for Vercel deployment to complete..."
        echo "📊 Deployment ID: $deployment_id"
        
        # Get project info to find the correct deployment
        echo "🔍 Getting project information..."
        project_response=$(curl -s "https://api.vercel.com/v1/projects" \
          -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
          -H "Content-Type: application/json")
        
        echo "📄 Project response: $project_response"
        
        # Find the project ID (you might need to set this as a secret)
        project_id="${{ secrets.VERCEL_PROJECT_ID }}"
        if [ -z "$project_id" ]; then
          echo "❌ VERCEL_PROJECT_ID not set in secrets!"
          echo "🔍 Please add your Vercel project ID to GitHub secrets"
          exit 1
        fi
        
        echo "📊 Project ID: $project_id"
        
        # Wait for deployment to complete (max 10 minutes)
        timeout=600
        elapsed=0
        
        while [ $elapsed -lt $timeout ]; do
          echo "🔍 Checking deployment status... ($elapsed/$timeout seconds)"
          
          # Check latest deployment for this project
          deployment_response=$(curl -s "https://api.vercel.com/v1/deployments?projectId=$project_id&limit=1" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json")
          
          echo "📄 Deployment response: $deployment_response"
          
          # Parse deployment state
          state=$(echo "$deployment_response" | jq -r '.deployments[0].state // "unknown"' 2>/dev/null || echo "parse_error")
          ready_state=$(echo "$deployment_response" | jq -r '.deployments[0].readyState // "unknown"' 2>/dev/null || echo "parse_error")
          
          echo "📊 Deployment state: $state"
          echo "📊 Ready state: $ready_state"
          
          case $state in
            "READY")
              echo "✅ Vercel deployment completed successfully!"
              echo "🎉 Your application is now live!"
              exit 0
              ;;
            "ERROR"|"CANCELED")
              echo "❌ Vercel deployment failed!"
              echo "📄 Full response: $deployment_response"
              exit 1
              ;;
            "BUILDING"|"QUEUED"|"PENDING")
              echo "⏳ Deployment still in progress... ($elapsed/$timeout seconds)"
              sleep 15
              elapsed=$((elapsed + 15))
              ;;
            "parse_error")
              echo "⚠️  Failed to parse response, retrying..."
              sleep 15
              elapsed=$((elapsed + 15))
              ;;
            *)
              echo "⚠️  Unknown deployment state: $state"
              echo "📄 Full response: $deployment_response"
              sleep 15
              elapsed=$((elapsed + 15))
              ;;
          esac
        done
        
        echo "⏰ Timeout waiting for Vercel deployment"
        echo "🔍 Check your Vercel dashboard for project: $project_id"
        exit 1
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
