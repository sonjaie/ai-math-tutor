name: CI/CD Pipeline - GitHub → Supabase → Vercel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Test and build job
  test-and-build:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run type check
      run: npm run typecheck
      
    - name: 🧹 Run linting
      run: npm run lint
      
    - name: 🏗️ Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: 🗄️ Run Supabase Migration Check
      run: |
        echo "🔍 Checking database migration status..."
        node scripts/migrate.js
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        
    - name: ✅ Verify Build Success
      run: |
        echo "✅ Build completed successfully"
        echo "📦 Application is ready for deployment"

  # Deploy to Vercel job
  deploy-to-vercel:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: test-and-build  # Wait for test-and-build to complete successfully
    timeout-minutes: 15  # Prevent hanging deployments
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🚀 Install Vercel CLI
      run: |
        echo "📦 Installing Vercel CLI..."
        npm install -g vercel@latest
        
    - name: 🔑 Set Vercel Environment
      run: |
        echo "🔐 Setting up Vercel authentication..."
        echo "VERCEL_TOKEN=${{ secrets.VERCEL_TOKEN }}" >> $GITHUB_ENV
        
    - name: 🚀 Deploy to Vercel
      id: deploy
      run: |
        echo "🚀 Starting Vercel deployment..."
        
        # Deploy to Vercel with production flag
        echo "📡 Creating production deployment..."
        deployment_output=$(vercel --prod --yes --token="${{ secrets.VERCEL_TOKEN }}" 2>&1)
        deployment_exit_code=$?
        
        echo "📄 Deployment output:"
        echo "$deployment_output"
        
        # Check if deployment was successful
        if [ $deployment_exit_code -ne 0 ]; then
          echo "❌ Vercel deployment failed with exit code: $deployment_exit_code"
          echo "📄 Full output: $deployment_output"
          exit 1
        fi
        
        # Extract deployment URL from output
        deployment_url=$(echo "$deployment_output" | grep -o 'https://[^[:space:]]*\.vercel\.app' | head -1)
        if [ -z "$deployment_url" ]; then
          echo "❌ Failed to extract deployment URL from output"
          echo "📄 Full output: $deployment_output"
          exit 1
        fi
        
        echo "✅ Deployment created successfully!"
        echo "🌐 Deployment URL: $deployment_url"
        echo "deployment_url=$deployment_url" >> $GITHUB_OUTPUT
        
    - name: ⏳ Wait for Vercel Build Completion
      id: wait-for-build
      run: |
        deployment_url="${{ steps.deploy.outputs.deployment_url }}"
        echo "⏳ Waiting for Vercel build to complete..."
        echo "🌐 Monitoring: $deployment_url"
        
        # Maximum wait time: 10 minutes (600 seconds)
        max_wait_time=600
        check_interval=30
        elapsed_time=0
        
        while [ $elapsed_time -lt $max_wait_time ]; do
          echo "🔍 Checking deployment status... (${elapsed_time}s elapsed)"
          
          # Test the deployment URL
          response=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$deployment_url" || echo "000")
          echo "📡 HTTP Status: $response"
          
          if [ "$response" = "200" ]; then
            echo "✅ Deployment is live and responding!"
            echo "🎉 Application successfully deployed at: $deployment_url"
            echo "build_completed=true" >> $GITHUB_OUTPUT
            echo "final_status=success" >> $GITHUB_OUTPUT
            exit 0
          elif [ "$response" = "404" ] || [ "$response" = "503" ]; then
            echo "⏳ Build still in progress... (HTTP $response)"
          else
            echo "⚠️  Unexpected response: HTTP $response"
          fi
          
          # Wait before next check
          sleep $check_interval
          elapsed_time=$((elapsed_time + check_interval))
        done
        
        echo "⏰ Timeout reached after ${max_wait_time} seconds"
        echo "⚠️  Deployment may still be building - check Vercel dashboard"
        echo "build_completed=false" >> $GITHUB_OUTPUT
        echo "final_status=timeout" >> $GITHUB_OUTPUT
        
    - name: 📊 Deployment Summary
      if: always()
      run: |
        deployment_url="${{ steps.deploy.outputs.deployment_url }}"
        build_completed="${{ steps.wait-for-build.outputs.build_completed }}"
        final_status="${{ steps.wait-for-build.outputs.final_status }}"
        
        echo ""
        echo "🎯 DEPLOYMENT SUMMARY"
        echo "===================="
        echo "🌐 Deployment URL: $deployment_url"
        echo "📊 Build Status: $final_status"
        echo "✅ Build Completed: $build_completed"
        echo ""
        
        if [ "$build_completed" = "true" ]; then
          echo "🎉 SUCCESS: Your application is live!"
          echo "🔗 Visit: $deployment_url"
        else
          echo "⚠️  WARNING: Build may still be in progress"
          echo "🔍 Check Vercel dashboard: https://vercel.com/dashboard"
          echo "🌐 URL: $deployment_url"
        fi
        
    - name: 📝 Post Deployment Check
      if: steps.wait-for-build.outputs.final_status == 'success'
      run: |
        deployment_url="${{ steps.deploy.outputs.deployment_url }}"
        echo "🧪 Running post-deployment health check..."
        
        # Test key endpoints
        echo "🔍 Testing main page..."
        main_response=$(curl -s -o /dev/null -w "%{http_code}" "$deployment_url" || echo "000")
        
        if [ "$main_response" = "200" ]; then
          echo "✅ Main page is accessible"
        else
          echo "⚠️  Main page returned HTTP $main_response"
        fi
        
        echo "🎯 Deployment health check completed"

  # Pull Request validation (runs on PRs)
  pr-validation:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run type check
      run: npm run typecheck
      
    - name: 🧹 Run linting
      run: npm run lint
      
    - name: 🏗️ Build application (test)
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: ✅ PR Validation Complete
      run: |
        echo "✅ Pull request validation passed!"
        echo "🚀 Ready to merge and deploy"