name: CI/CD Pipeline with Database Migration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Build and Deploy for main branch
  build-and-deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run type check
      run: npm run typecheck
      
    - name: Run linting
      run: npm run lint
      
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: Run Supabase Migration
      run: |
        # Run migration using Node.js script (no Supabase CLI needed)
        node scripts/migrate.js
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        
    - name: Verify Migration Success
      run: |
        echo "‚úÖ Database migration completed successfully"
        
    - name: Trigger Vercel Deploy Hook
      id: deploy
      run: |
        echo "üöÄ Triggering Vercel deployment..."
        response=$(curl -X POST "${{ secrets.VERCEL_DEPLOY_HOOK_URL }}" -s)
        echo "Vercel response: $response"
        
        # Extract deployment ID from response
        deployment_id=$(echo $response | jq -r '.job.id // empty')
        if [ -z "$deployment_id" ]; then
          echo "‚ùå Failed to get deployment ID from Vercel"
          exit 1
        fi
        
        echo "üìä Deployment ID: $deployment_id"
        echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT
        
    - name: Wait for Vercel Deployment
      run: |
        deployment_id="${{ steps.deploy.outputs.deployment_id }}"
        echo "‚è≥ Waiting for Vercel deployment to complete..."
        
        # Wait for deployment to complete (max 10 minutes)
        timeout=600
        elapsed=0
        
        while [ $elapsed -lt $timeout ]; do
          # Check deployment status
          status_response=$(curl -s "https://api.vercel.com/v1/deployments/$deployment_id" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" || echo '{"state":"error"}')
          
          state=$(echo $status_response | jq -r '.state // "error"')
          echo "üìä Deployment state: $state"
          
          case $state in
            "READY")
              echo "‚úÖ Vercel deployment completed successfully!"
              exit 0
              ;;
            "ERROR"|"CANCELED")
              echo "‚ùå Vercel deployment failed!"
              exit 1
              ;;
            "BUILDING"|"QUEUED"|"PENDING")
              echo "‚è≥ Deployment still in progress... ($elapsed/$timeout seconds)"
              sleep 10
              elapsed=$((elapsed + 10))
              ;;
            *)
              echo "‚ö†Ô∏è  Unknown deployment state: $state"
              sleep 10
              elapsed=$((elapsed + 10))
              ;;
          esac
        done
        
        echo "‚è∞ Timeout waiting for Vercel deployment"
        exit 1
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
